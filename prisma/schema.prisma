// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  email        String    @unique
  passwordHash String
  tasks        Task[]    @relation("UserTasks")
  labels       Label[]   @relation("UserLabels")
  comments     Comment[] @relation("UserComments")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Task {
  id           String      @id @default(uuid())
  user         User        @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  title        String
  description  String
  dueDate      DateTime?
  isCompleted  Boolean     @default(false)
  labels       TaskLabel[] @relation("TaskTaskLabels")
  reminders    Reminder[]  @relation("TaskReminders")
  comments     Comment[]   @relation("TaskComments")
  parentTask   Task?       @relation("SubtaskParent", fields: [parentTaskId], references: [id], onDelete: Cascade)
  parentTaskId String?
  subtasks     Task[]      @relation("SubtaskParent")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([parentTaskId])
}

model Label {
  id         String      @id @default(uuid())
  user       User        @relation("UserLabels", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  name       String
  color      String
  taskLabels TaskLabel[] @relation("LabelTaskLabels")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
}

model TaskLabel {
  id      String @id @default(uuid())
  task    Task   @relation("TaskTaskLabels", fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String
  label   Label  @relation("LabelTaskLabels", fields: [labelId], references: [id], onDelete: Cascade)
  labelId String

  @@unique([taskId, labelId])
  @@index([taskId])
  @@index([labelId])
}

model Reminder {
  id        String   @id @default(uuid())
  task      Task     @relation("TaskReminders", fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  remindAt  DateTime
  isSent    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
}

model Comment {
  id        String   @id @default(uuid())
  task      Task     @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([userId])
}
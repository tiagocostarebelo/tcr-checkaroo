// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String  @id
  email           String  @unique
  firstName       String?
  lastName        String?
  displayName     String?
  profileImageUrl String?
  authProvider    String?

  tasks    Task[]    @relation("UserTasks")
  labels   Label[]   @relation("UserLabels")
  comments Comment[] @relation("UserComments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String? // Made optional
  dueDate     DateTime?
  isCompleted Boolean      @default(false)
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId String
  user   User   @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)

  parentTaskId String?
  parentTask   Task?   @relation("SubtaskParent", fields: [parentTaskId], references: [id], onDelete: SetNull) // Subtasks become top-level if parent is deleted
  subtasks     Task[]  @relation("SubtaskParent")

  labels    TaskLabel[] @relation("TaskTaskLabels")
  reminders Reminder[]  @relation("TaskReminders")
  comments  Comment[]   @relation("TaskComments")

  @@index([userId])
  @@index([parentTaskId])
}

model Label {
  id        String   @id @default(uuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Added

  userId String
  user   User   @relation("UserLabels", fields: [userId], references: [id], onDelete: Cascade)

  taskLabels TaskLabel[] @relation("LabelTaskLabels")

  @@index([userId])
}

model TaskLabel {
  id      String @id @default(uuid())
  taskId  String
  labelId String

  task  Task  @relation("TaskTaskLabels", fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation("LabelTaskLabels", fields: [labelId], references: [id], onDelete: Cascade)

  // createdAt DateTime @default(now()) 

  @@unique([taskId, labelId])
  @@index([taskId])
  @@index([labelId])
}

model Reminder {
  id        String   @id @default(uuid())
  remindAt  DateTime
  isSent    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId String
  task   Task   @relation("TaskReminders", fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId String
  task   Task   @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
